// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using questionnaire.Models;

#nullable disable

namespace questionnaire.Migrations
{
    [DbContext(typeof(QuestionnaireContext))]
    [Migration("20250324095945_AddLinkQuestionnaire")]
    partial class AddLinkQuestionnaire
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnonymousId")
                        .HasColumnType("int")
                        .HasColumnName("anonymous_ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_ID");

                    b.Property<int?>("SelectOption")
                        .HasColumnType("int")
                        .HasColumnName("select_option");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_ID");

                    b.HasKey("Id")
                        .HasName("PK__Answer__3213E83F3574F1FF");

                    b.HasIndex("AnonymousId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectOption");

                    b.HasIndex("UserId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("option_text");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_ID");

                    b.HasKey("Id")
                        .HasName("PK_QuestionOption");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOption", (string)null);
                });

            modelBuilder.Entity("questionnaire.Models.AccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("level_name");

                    b.HasKey("Id")
                        .HasName("PK__AccessLe__3213E83F5CA6A6C9");

                    b.HasIndex(new[] { "Id" }, "UQ__AccessLe__3213E83E880716CE")
                        .IsUnique();

                    b.ToTable("AccessLevel", (string)null);
                });

            modelBuilder.Entity("questionnaire.Models.Anonymou", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("session_id")
                        .HasDefaultValueSql("NEWID()");

                    b.HasKey("Id")
                        .HasName("PK__Anonymou__3213E83F1978D4C1");

                    b.HasIndex(new[] { "Id" }, "UQ__Anonymou__3213E83E1D1C793D")
                        .IsUnique();

                    b.HasIndex(new[] { "SessionId" }, "UQ__Anonymou__69B13FDD8723FC70")
                        .IsUnique();

                    b.ToTable("Anonymous");
                });

            modelBuilder.Entity("questionnaire.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("question_type_ID");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int")
                        .HasColumnName("questionnaire_ID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("PK__Question__3213E83F0FCDB0B0");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("questionnaire.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameQuestion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name_question");

                    b.HasKey("Id")
                        .HasName("PK__Question__3213E83FDD8A0518");

                    b.HasIndex(new[] { "Id" }, "UQ__Question__3213E83E0D186B02")
                        .IsUnique();

                    b.ToTable("QuestionType", (string)null);
                });

            modelBuilder.Entity("questionnaire.Models.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccessLinkToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("access_link_token")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit")
                        .HasColumnName("is_published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("TypeQuestionnaireId")
                        .HasColumnType("int")
                        .HasColumnName("type_questionnaire_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_ID");

                    b.HasKey("Id")
                        .HasName("PK__Question__3213E83FB95D3D32");

                    b.HasIndex("TypeQuestionnaireId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "UQ__Question__3213E83E8ABF1C9E")
                        .IsUnique();

                    b.ToTable("Questionnaire", (string)null);
                });

            modelBuilder.Entity("questionnaire.Models.QuestionnaireHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("completed_at");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int")
                        .HasColumnName("questionnaire_ID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_ID");

                    b.HasKey("Id")
                        .HasName("PK__Question__3213E83F39C16374");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "UQ__Question__3213E83E9914531B")
                        .IsUnique();

                    b.ToTable("QuestionnaireHistory", (string)null);
                });

            modelBuilder.Entity("questionnaire.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("refresh_token_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_ID");

                    b.HasKey("Id")
                        .HasName("PK__Tokens__3213E83FF333D097");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "UQ__Tokens__3213E83E708D96DB")
                        .IsUnique();

                    b.HasIndex(new[] { "RefreshToken" }, "UQ__Tokens__7FB69BAD6E2F1F3A")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("questionnaire.Models.TypeQuestionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__TypeQues__3213E83FBDD485ED");

                    b.HasIndex(new[] { "Id" }, "UQ__TypeQues__3213E83E16F8D4FB")
                        .IsUnique();

                    b.ToTable("TypeQuestionnaire", (string)null);
                });

            modelBuilder.Entity("questionnaire.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevelId")
                        .HasColumnType("int")
                        .HasColumnName("access_level_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__User__3213E83F3809148A");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex(new[] { "Id" }, "UQ__User__3213E83EB8CF6A85")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Answer", b =>
                {
                    b.HasOne("questionnaire.Models.Anonymou", "Anonymous")
                        .WithMany("Answers")
                        .HasForeignKey("AnonymousId")
                        .HasConstraintName("Answer_fk1");

                    b.HasOne("questionnaire.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("Answer_fk2");

                    b.HasOne("QuestionOption", "QuestionOption")
                        .WithMany("Answers")
                        .HasForeignKey("SelectOption")
                        .HasConstraintName("Answer_QuestionOption_fk");

                    b.HasOne("questionnaire.Models.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Answer_fk3");

                    b.Navigation("Anonymous");

                    b.Navigation("Question");

                    b.Navigation("QuestionOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuestionOption", b =>
                {
                    b.HasOne("questionnaire.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("QuestionOption_fk1");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("questionnaire.Models.Question", b =>
                {
                    b.HasOne("questionnaire.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .IsRequired()
                        .HasConstraintName("Question_fk1");

                    b.HasOne("questionnaire.Models.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .IsRequired()
                        .HasConstraintName("Question_fk2");

                    b.Navigation("QuestionType");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("questionnaire.Models.Questionnaire", b =>
                {
                    b.HasOne("questionnaire.Models.TypeQuestionnaire", "TypeQuestionnaire")
                        .WithMany("Questionnaires")
                        .HasForeignKey("TypeQuestionnaireId")
                        .IsRequired()
                        .HasConstraintName("Questionnaire_fk1");

                    b.HasOne("questionnaire.Models.User", "User")
                        .WithMany("Questionnaires")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Questionnaire_fk2");

                    b.Navigation("TypeQuestionnaire");

                    b.Navigation("User");
                });

            modelBuilder.Entity("questionnaire.Models.QuestionnaireHistory", b =>
                {
                    b.HasOne("questionnaire.Models.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnaireHistories")
                        .HasForeignKey("QuestionnaireId")
                        .IsRequired()
                        .HasConstraintName("QuestionnaireHistory_fk1");

                    b.HasOne("questionnaire.Models.User", "User")
                        .WithMany("QuestionnaireHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("QuestionnaireHistory_fk2");

                    b.Navigation("Questionnaire");

                    b.Navigation("User");
                });

            modelBuilder.Entity("questionnaire.Models.Token", b =>
                {
                    b.HasOne("questionnaire.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Tokens_fk1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("questionnaire.Models.User", b =>
                {
                    b.HasOne("questionnaire.Models.AccessLevel", "AccessLevel")
                        .WithMany("Users")
                        .HasForeignKey("AccessLevelId")
                        .IsRequired()
                        .HasConstraintName("User_fk1");

                    b.Navigation("AccessLevel");
                });

            modelBuilder.Entity("QuestionOption", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("questionnaire.Models.AccessLevel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("questionnaire.Models.Anonymou", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("questionnaire.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("questionnaire.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("questionnaire.Models.Questionnaire", b =>
                {
                    b.Navigation("QuestionnaireHistories");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("questionnaire.Models.TypeQuestionnaire", b =>
                {
                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("questionnaire.Models.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionnaireHistories");

                    b.Navigation("Questionnaires");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
